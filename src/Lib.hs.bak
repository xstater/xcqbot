{-# LANGUAGE TypeSynonymInstances #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE OverloadedStrings #-}

module Lib(
    Sex (Male,Female),
    Role (Owner,Admin,Member),
    UserInfo(UserInfo),
    Anonymous(Anonymous),
    MessageInfo(MessageInfo),
    getMessageInfo,
    getEventInfo
)where 

import Data.Maybe
import Data.Eq
import Data.Aeson
import qualified Data.ByteString as BS
import Data.Text
import Data.Scientific
import Control.Monad
import qualified Data.HashMap.Lazy as HM

data Sex = Male | Female deriving (Eq,Show)
data Role = Owner | Admin | Member deriving (Eq,Show)

data UserInfo = UserInfo {
    qq :: Maybe Int,
    nickname :: Maybe Text,
    sex :: Maybe Sex,
    age :: Maybe Int,
    card :: Maybe Text,
    area :: Maybe Text,
    level :: Maybe Text,
    role :: Maybe Role,
    title :: Maybe Text
}deriving (Eq,Show)

data Anonymous = Anonymous {
    anonymous_id :: Int,
    anonymous_name :: Text,
    anonymous_flag :: Text
}deriving (Eq,Show)

data MessageInfo = MessageInfo {
    user :: UserInfo,
    group_id :: Maybe Int,
    font :: Maybe Int,
    message :: Text,
    anonymous :: Maybe Anonymous
}deriving (Eq,Show)

data EventType = 
    MessageEvent
  | NoticeEvent
  | RequestEvent deriving (Eq,Show)

--message events

data MessageEventType =
    PrivateMessageEvent
  | GroupMessageEvent
  | DiscussMessageEvent deriving (Eq,Show)

data PrivateMessage =
    FromFriend
  | FromGroup
  | FromDiscuss
  | FromOther deriving (Eq,Show)

data GroupMessage =
    NormalMessage
  | AnonymousMessage
  | NoticeMessage deriving (Eq,Show)

--notice events

data NoticeEventType = 
    GroupUploadEvent
  | GroupAdminChangeEvent
  | GroupMemberDecreaseEvent
  | GroupMemberIncreaseEvent
  | GroupMemberBanEvent
  | FriendAddEvent deriving (Eq,Show)

data GroupAdminChange = 
    SetAdmin
  | UnsetAdmin deriving (Eq,Show)

data GroupMemberDecrease = 
    MemberLeave
  | MemberKick
  | MemberKickMe deriving (Eq,Show)

data GroupMemberIncrease =
    MemberApprove
  | MemberInvite deriving (Eq,Show)

data GroupMemberBan =
    MemberBan
  | MemberLiftBan deriving (Eq,Show)

--requetst events

data RequestEventType = 
    RequestFriendEvent
  | RequestGroupEvent deriving (Eq,Show)

data RequestGroup = 
    RequestGroupAdd
  | RequestGroupInvite deriving (Eq,Show)

--all events
data AllEvents = AllEvents {
    event_type :: Maybe EventType,
    --message
    message_event_type :: Maybe MessageEventType,
    private_message :: Maybe PrivateMessage,
    group_message :: Maybe GroupMessage,
    --notice 
    notice_event_type :: Maybe NoticeEventType,
    group_admin_change :: Maybe GroupAdminChange,
    group_member_decrease :: Maybe GroupMemberDecrease,
    group_member_increase :: Maybe GroupMemberIncrease,
    group_member_ban :: Maybe GroupMemberBan,
    --request
    request_event_type :: Maybe RequestEventType,
    request_group :: Maybe RequestGroup
}deriving (Eq,Show)

-----------------------------------


class FromValue a where
    convert :: Value -> Maybe a

instance FromValue Object where
    convert (Object o) = Just o
    convert _ = Nothing

instance FromValue Text where
    convert (String s) = Just s 
    convert _ = Nothing

instance FromValue Scientific where
    convert (Number n) = Just n
    convert _ = Nothing

instance FromValue Int where
    convert f = do
        v <- convert f
        toBoundedInteger v

instance FromValue Bool where
    convert (Bool b) = Just b
    convert _ = Nothing

---------------------------

instance FromValue Sex where
    convert (String "male") = Just Male
    convert (String "female") = Just Female
    convert _ = Nothing

instance FromValue Role where
    convert (String "owner") = Just Owner
    convert (String "admin") = Just Admin
    convert (String "member") = Just Member
    convert _ = Nothing

-------------------------------

instance FromValue EventType where
    convert (String "message") = Just MessageEvent
    convert (String "notice") = Just NoticeEvent
    convert (String "request") = Just RequestEvent
    convert _ = Nothing

instance FromValue MessageEventType where
    convert (String "private") = Just PrivateMessageEvent
    convert (String "group") = Just GroupMessageEvent
    convert (String "discuss") = Just DiscussMessageEvent
    convert _ = Nothing
    
instance FromValue PrivateMessage where
    convert (String "friend") = Just FromFriend
    convert (String "group") = Just FromGroup
    convert (String "discuss") = Just FromDiscuss
    convert (String "other") = Just FromOther
    convert _ = Nothing

instance FromValue GroupMessage where
    convert (String "normal") = Just NormalMessage
    convert (String "anonymous") = Just AnonymousMessage
    convert (String "notice") = Just NoticeMessage
    convert _ = Nothing

instance FromValue NoticeEventType where
    convert (String "group_upload") = Just GroupUploadEvent
    convert (String "group_admin") = Just GroupAdminChangeEvent
    convert (String "group_decrease") = Just GroupMemberDecreaseEvent
    convert (String "group_increase") = Just GroupMemberIncreaseEvent
    convert (String "group_ban") = Just GroupMemberBanEvent
    convert (String "friend_add") = Just FriendAddEvent
    convert _ = Nothing

instance FromValue GroupAdminChange where
    convert (String "set") = Just SetAdmin
    convert (String "unset") = Just UnsetAdmin
    convert _ = Nothing

instance FromValue GroupMemberDecrease where
    convert (String "leave") = Just MemberLeave
    convert (String "kick") = Just MemberKick
    convert (String "kick_me") = Just MemberKickMe
    convert _ = Nothing

instance FromValue GroupMemberIncrease where
    convert (String "approve") = Just MemberApprove
    convert (String "invite") = Just MemberInvite
    convert _ = Nothing

instance FromValue GroupMemberBan where
    convert (String "ban") = Just MemberBan
    convert (String "lift_ban") = Just MemberLiftBan
    convert _ = Nothing

instance FromValue RequestEventType where
    convert (String "friend") = Just RequestFriendEvent
    convert (String "group") = Just RequestGroupEvent
    convert _ = Nothing

instance FromValue RequestGroup where
    convert (String "add") = Just RequestGroupAdd
    convert (String "invite") = Just RequestGroupInvite
    convert _ = Nothing

getData :: FromValue a => Text -> Object -> Maybe a
getData k o = do
    v <- HM.lookup k o
    convert v

getEventInfo :: Object -> AllEvents
getEventInfo obj = AllEvents {
    event_type = getData "post_type" obj,
    --messgae
    message_event_type = getData "message_type" obj,
    private_message = getData "sub_type" obj,
    group_message = getData "sub_type" obj,
    --notice
    notice_event_type = getData "notice_type" obj,
    group_admin_change = getData "sub_type" obj,
    group_member_decrease = getData "sub_type" obj,
    group_member_increase = getData "sub_type" obj,
    group_member_ban = getData "sub_type" obj,
    --request
    request_event_type = getData "request_type" obj,
    request_group = getData "sub_type" obj
}

getMessageInfo :: Object -> MessageInfo
getMessageInfo obj = MessageInfo {
    user = UserInfo {
        qq = getData "user_id" obj,
        nickname = sender >>= getData "nickname",
        sex = sender >>= getData "sex",
        age = sender >>= getData "age",
        card = sender >>= getData "card",
        area = sender >>= getData "area",
        level = sender >>= getData "level",
        role = sender >>= getData "role",
        title = sender >>= getData "title" 
    },
    group_id = getData "group_id" obj,
    font = getData "font" obj,
    message = Data.Text.concat $ maybeToList $ getData "message" obj,
    anonymous = Nothing
} where
    sender :: Maybe Object
    sender = getData "sender" obj
    anon :: Maybe Object
    anon = getData "anonymous" obj

